{
  "name": "@zenyway/zenypass",
  "configPublish": "http://npm.zenyway.com:5984",
  "version": "2.0.0-alpha.1",
  "description": "zero-knowledge open source password manager web-app that syncs and runs everywhere",
  "main": "dist/index.js",
  "browser": {
    "bootstrap": "./src/bootstrap",
    "clipboard-copy": "./src/clipboard-copy",
    "component-from-events": "./src/component-from-events",
    "component-from-props": "./src/component-from-props",
    "components": "./src/components",
    "create-element": "./src/create-element",
    "hocs": "./src/hocs",
    "zenypass-service": "./src/zenypass-service",
    "static": "./src/static",
    "utils": "./src/utils"
  },
  "scripts": {
    "stage": "bin/git-stage git.zenyway.com:staging-v2.zenypass.git dist staging",
    "deploy": "bin/git-deploy git.zenyway.com:production.zenypass.git dist production",
    "debug": "budo --live --host 127.0.0.1 --port 6510 --dir src/static/ src/index.tsx:index.js -- -g [ envify purge --NODE_ENV=development --ZP_VERSION=$npm_package_version ] -t [ browserify-markdown --breaks false ] -p [ tsify -p src ] -t imgurify -t brfs --debug -v",
    "dist:clean": "mkdirp dist && rimraf dist/*",
    "dist": "npm run dist:production",
    "dist:production": "npm run dist:clean && npm run dist:static && browserify src/index.tsx -g [ envify purge --NODE_ENV=production --ZP_VERSION=$npm_package_version ] -t [ browserify-markdown --breaks false ] -p [ tsify -p src ] -t imgurify -g uglifyify -p [ common-shakeify -v ] | terser -c -m --toplevel > dist/index.js",
    "dist:staging": "npm run dist:clean && npm run dist:static && browserify src/index.tsx -g [ envify purge --NODE_ENV=staging --ZP_VERSION=$npm_package_version ] -t [ browserify-markdown --breaks false ] -p [ tsify -p src ] -t imgurify -g uglifyify -p [ common-shakeify -v ] | terser -c -m --toplevel > dist/index.js",
    "dist:static": "cpx \"src/favicons/(!index.ts)\" dist && cpx \"src/static/**/*\" dist",
    "prepublish": "npm run dist",
    "pretest": "mkdirp spec/reports && rimraf spec/reports/*",
    "test": "karma start spec/karma.conf.js --single-run",
    "test:coverage": "npm run pretest && karma start spec/karma-coverage.conf.js --single-run && remap-istanbul -i spec/reports/coverage/chrom*/coverage.json -o spec/reports/coverage -t html && http-server -c-1 -o -p 8888 spec/reports/coverage",
    "test:hocs": "jasmine-ts \"spec/hocs/**/*.spec.ts\"",
    "pretest:ci": "mkdirp spec/reports/coverage && rimraf spec/reports/coverage",
    "serve": "http-server -c-1 -i -e html -o -p 6510 dist",
    "debug:ssl": "budo --ssl --live --open --port 6510 --dir src/static/ src/index.tsx:index.js -- -g [ envify purge --NODE_ENV development ] -t [ browserify-markdown --breaks false ] -p [ tsify -p src ] -t imgurify --debug -v",
    "storybook": "start-storybook --ci -s ./src/static -p 9001 -c .storybook",
    "start": "npm run dist && npm run serve",
    "test:ci:coveralls": "cat spec/reports/coverage/lcov.info | sed -e 's/SF:\\.\\.\\//SF:/' | coveralls",
    "test:ci": "karma start spec/karma-coverage.conf.js --single-run && remap-istanbul -i spec/reports/coverage/chrom*/coverage.json -o spec/reports/coverage/lcov.info -t lcovonly"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zenyway/zenypass.git"
  },
  "keywords": [
    "zero-knowledge",
    "password manager",
    "open source",
    "crypto",
    "pgp",
    "sync",
    "web application"
  ],
  "author": {
    "name": "Stephane M. Catala",
    "email": "stephane@zenyway.com"
  },
  "license": "SEE LICENSE IN LICENSE",
  "bugs": {
    "url": "https://github.com/zenyway/zenypass/issues"
  },
  "homepage": "https://github.com/zenyway/zenypass#readme",
  "dependencies": {
    "@zenyway/zenypass-service": "^1.0.1",
    "automata-reducer": "3.1.1",
    "basic-compose": "4.0.1",
    "basic-cursors": "2.2.0",
    "basic-fsa-factories": "1.1.0",
    "basic-l10n": "2.0.0",
    "component-from-stream": "0.17.2",
    "component-from-stream-redux": "0.5.7",
    "debug": "4.1.1",
    "inferno": "7.0.5",
    "inferno-bootstrap": "7.0.0",
    "inferno-create-element": "7.0.5",
    "query-string": "6.2.0",
    "rxjs": "6.3.3",
    "typestyle": "2.0.1"
  },
  "devDependencies": {
    "@babel/core": "7.2.2",
    "@storybook/addon-actions": "4.1.6",
    "@storybook/addon-options": "4.1.6",
    "@storybook/addon-viewport": "4.1.6",
    "@storybook/components": "^4.1.6",
    "@storybook/react": "4.1.6",
    "@types/debug": "0.0.31",
    "@types/jasmine": "3.3.5",
    "@types/node": "10.12.18",
    "aliasify": "2.1.0",
    "babel-loader": "8.0.5",
    "brfs": "2.0.1",
    "browser-pack-flat": "3.2.0",
    "browserify": "16.2.3",
    "browserify-istanbul": "2.0.0",
    "browserify-licenses": "1.4.6",
    "browserify-markdown": "2.0.1",
    "budo": "11.6.0",
    "common-shakeify": "0.5.3",
    "concurrently": "4.1.0",
    "coveralls": "3.0.2",
    "cpx": "1.5.0",
    "envify": "4.1.0",
    "eslint-plugin-typescript": "0.14.0",
    "extract-zip": "1.6.7",
    "http-server": "0.11.1",
    "imgurify": "2.0.1",
    "inferno-clone-vnode": "7.0.5",
    "inferno-compat": "7.0.5",
    "inferno-create-class": "7.0.5",
    "inferno-devtools": "7.0.5",
    "jasmine-core": "3.3.0",
    "jasmine-ts": "0.3.0",
    "karma": "3.1.4",
    "karma-browserify": "6.0.0",
    "karma-chrome-launcher": "2.2.0",
    "karma-coverage": "1.1.2",
    "karma-firefox-launcher": "1.1.0",
    "karma-jasmine": "2.0.1",
    "karma-jasmine-html-reporter": "1.4.0",
    "karma-junit-reporter": "1.2.0",
    "karma-safari-launcher": "1.0.0",
    "karma-spec-reporter": "0.0.32",
    "mkdirp": "0.5.1",
    "pkg-dir-cli": "2.1.0",
    "remap-istanbul": "0.8.4",
    "rimraf": "2.6.3",
    "standard": "12.0.1",
    "transform-loader": "0.2.4",
    "ts-loader": "5.3.3",
    "ts-node": "7.0.1",
    "tsify": "4.0.1",
    "tslint": "5.12.1",
    "tslint-config-standard": "8.0.1",
    "typescript": "3.2.2",
    "typescript-eslint-parser": "21.0.2",
    "uglify-es": "3.3.9",
    "uglifyify": "5.0.1",
    "undebuggify": "1.1.0",
    "watchify": "3.11.0"
  },
  "aliasify": {
    "aliases": {}
  },
  "standard": {
    "parser": "typescript-eslint-parser",
    "plugins": [
      "typescript"
    ]
  }
}
